c++:
void reverseArray(vector<int>& nums, int start, int end) {
    while (start < end) {
        swap(nums[start], nums[end]);
        start++;
        end--;
    }
}

void rightRotate(vector<int>& nums, int k) {
    int n = nums.size();
    if (n == 0) return;
    k = k % n; // In case k is larger than n

    reverseArray(nums, 0, k - 1); // Reverse first k elements
    reverseArray(nums, k, n - 1); // Reverse the remaining elements
    reverseArray(nums, 0, n - 1); // Reverse the entire array
}  
java:
public static void reverseArray(int[] nums, int start, int end) {
        while (start < end) {
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }

    public static void rightRotate(int[] nums, int k) {
        int n = nums.length;
        if (n == 0) return;
        k = k % n; // In case k is larger than n

        reverseArray(nums, 0, k - 1); // Reverse first k elements
        reverseArray(nums, k, n - 1); // Reverse the remaining elements
        reverseArray(nums, 0, n - 1); // Reverse the entire array
    }
python:
def reverse_array(nums, start, end):
    while start < end:
        nums[start], nums[end] = nums[end], nums[start]
        start += 1
        end -= 1

def right_rotate(nums, k):
    n = len(nums)
    if n == 0:
        return
    k = k % n  # In case k is larger than n

    reverse_array(nums, 0, k - 1)  # Reverse first k elements
    reverse_array(nums, k, n - 1)  # Reverse the remaining elements
    reverse_array(nums, 0, n - 1)  # Reverse the entire array
