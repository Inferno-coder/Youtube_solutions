c++:
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int longestSubarray(vector<int>& arr, int k) {
    int n = arr.size();
    int left = 0, sum = 0, maxLength = 0;

    for (int right = 0; right < n; right++) {
        sum += arr[right];

        while (sum > k && left <= right) {
            sum -= arr[left];
            left++;
        }

        if (sum == k) {
            maxLength = max(maxLength, right - left + 1);
        }
    }

    return maxLength;
}

int main() {
    vector<int> arr = {1, 2, 3, 1, 1, 1, 5, 2, 3};
    int k = 5;
    cout << "Longest subarray length: " << longestSubarray(arr, k) << endl;
    return 0;
}

java:
import java.util.*;

public class Main {
    public static int longestSubarray(int[] arr, int k) {
        int n = arr.length;
        int left = 0, sum = 0, maxLength = 0;

        for (int right = 0; right < n; right++) {
            sum += arr[right];

            while (sum > k && left <= right) {
                sum -= arr[left];
                left++;
            }

            if (sum == k) {
                maxLength = Math.max(maxLength, right - left + 1);
            }
        }

        return maxLength;
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 1, 1, 1, 5, 2, 3};
        int k = 5;
        System.out.println("Longest subarray length: " + longestSubarray(arr, k));
    }
}


python:

def longestSubarray(arr, k):
    n = len(arr)
    left = 0
    sum = 0
    maxLength = 0

    for right in range(n):
        sum += arr[right]

        while sum > k and left <= right:
            sum -= arr[left]
            left += 1

        if sum == k:
            maxLength = max(maxLength, right - left + 1)

    return maxLength

arr = [1, 2, 3, 1, 1, 1, 5, 2, 3]
k = 5
print("Longest subarray length:", longestSubarray(arr, k))
