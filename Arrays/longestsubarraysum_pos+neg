c++:
#include <iostream>
#include <vector>
#include <unordered_map>

using namespace std;

int longestSubarray(vector<int>& arr, int k) {
    unordered_map<int, int> prefixMap;
    int prefixSum = 0, maxLength = 0;

    for (int i = 0; i < arr.size(); i++) {
        prefixSum += arr[i];

        if (prefixSum == k) {
            maxLength = max(maxLength, i + 1);
        }

        if (prefixMap.find(prefixSum - k) != prefixMap.end()) {
            maxLength = max(maxLength, i - prefixMap[prefixSum - k]);
        }

        if (prefixMap.find(prefixSum) == prefixMap.end()) {
            prefixMap[prefixSum] = i;
        }
    }

    return maxLength;
}

int main() {
    vector<int> arr = {1, 2, 3, 7, 5};
    int k = 12;
    cout << "Longest Subarray Length: " << longestSubarray(arr, k) << endl;
    return 0;
}

java:
import java.util.HashMap;

public class Main {
    public static int longestSubarray(int[] arr, int k) {
        HashMap<Integer, Integer> prefixMap = new HashMap<>();
        int prefixSum = 0, maxLength = 0;

        for (int i = 0; i < arr.length; i++) {
            prefixSum += arr[i];

            if (prefixSum == k) {
                maxLength = Math.max(maxLength, i + 1);
            }

            if (prefixMap.containsKey(prefixSum - k)) {
                maxLength = Math.max(maxLength, i - prefixMap.get(prefixSum - k));
            }

            if (!prefixMap.containsKey(prefixSum)) {
                prefixMap.put(prefixSum, i);
            }
        }

        return maxLength;
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 7, 5};
        int k = 12;
        System.out.println("Longest Subarray Length: " + longestSubarray(arr, k));
    }
}
python:
def longestSubarray(arr, k):
    prefixMap = {}
    prefixSum = 0
    maxLength = 0

    for i in range(len(arr)):
        prefixSum += arr[i]

        if prefixSum == k:
            maxLength = max(maxLength, i + 1)

        if prefixSum - k in prefixMap:
            maxLength = max(maxLength, i - prefixMap[prefixSum - k])

        if prefixSum not in prefixMap:
            prefixMap[prefixSum] = i

    return maxLength

arr = [1, 2, 3, 7, 5]
k = 12
print("Longest Subarray Length:", longestSubarray(arr, k))
