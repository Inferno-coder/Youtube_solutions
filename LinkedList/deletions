c++:
// Delete from front (unlink only)
void deleteFromFront(Node*& head) {
    if (!head) return;
    head = head->next;
}

// Delete from end (unlink only)
void deleteFromEnd(Node*& head) {
    if (!head) return;
    if (!head->next) {
        head = nullptr;
        return;
    }
    Node* temp = head;
    while (temp->next && temp->next->next) {
        temp = temp->next;
    }
    temp->next = nullptr;
}

// Delete a node by value (unlink only)
void deleteByValue(Node*& head, int val) {
    if (!head) return;
    if (head->data == val) {
        head = head->next;
        return; 
    }

    Node* temp = head;
    while (temp->next && temp->next->data != val) {
        temp = temp->next;
    }

    if (temp->next) {
        temp->next = temp->next->next;
    }
}


java:
class Node {
    int data;
    Node next;

    Node(int val) {
        this.data = val;
        this.next = null;
    }
}

public class LinkedList {
    Node head;

    // Delete from front (unlink only)
    public void deleteFromFront() {
        if (head == null) return;
        head = head.next;
    }

    // Delete from end (unlink only)
    public void deleteFromEnd() {
        if (head == null) return;
        if (head.next == null) {
            head = null;
            return;
        }

        Node temp = head;
        while (temp.next != null && temp.next.next != null) {
            temp = temp.next;
        }
        temp.next = null;
    }

    // Delete by value (unlink only)
    public void deleteByValue(int val) {
        if (head == null) return;

        if (head.data == val) {
            head = head.next;
            return;
        }

        Node temp = head;
        while (temp.next != null && temp.next.data != val) {
            temp = temp.next;
        }

        if (temp.next != null) {
            temp.next = temp.next.next;
        }
    }
}



python:
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    # Delete from front (unlink only)
    def delete_from_front(self):
        if self.head is None:
            return
        self.head = self.head.next

    # Delete from end (unlink only)
    def delete_from_end(self):
        if self.head is None:
            return
        if self.head.next is None:
            self.head = None
            return

        temp = self.head
        while temp.next and temp.next.next:
            temp = temp.next
        temp.next = None

    # Delete by value (unlink only)
    def delete_by_value(self, val):
        if self.head is None:
            return

        if self.head.data == val:
            self.head = self.head.next
            return

        temp = self.head
        while temp.next and temp.next.data != val:
            temp = temp.next

        if temp.next:
            temp.next = temp.next.next
