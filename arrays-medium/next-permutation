c++:
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int ind = -1, n = nums.size();
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                ind = i;
                break;
            }
        }
        if (ind == -1) {
            reverse(nums.begin(), nums.end());
            return;
        }
        for (int i = n - 1; i > ind; i--) {
            if (nums[i] > nums[ind]) {
                swap(nums[ind], nums[i]);
                break;
            }
        }
        reverse(nums.begin() + ind + 1, nums.end());
    }
};
java:
class Solution {
    public void nextPermutation(int[] nums) {
        int ind = -1, n = nums.length;
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                ind = i;
                break;
            }
        }
        if (ind == -1) {
            reverse(nums, 0, n - 1);
            return;
        }
        for (int i = n - 1; i > ind; i--) {
            if (nums[i] > nums[ind]) {
                swap(nums, ind, i);
                break;
            }
        }
        reverse(nums, ind + 1, n - 1);
    }

    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    private void reverse(int[] nums, int start, int end) {
        while (start < end) {
            swap(nums, start++, end--);
        }
    }
}
python:
class Solution:
    def nextPermutation(self, nums):
        ind, n = -1, len(nums)
        for i in range(n - 2, -1, -1):
            if nums[i] < nums[i + 1]:
                ind = i
                break
        if ind == -1:
            nums.reverse()
            return
        for i in range(n - 1, ind, -1):
            if nums[i] > nums[ind]:
                nums[ind], nums[i] = nums[i], nums[ind]
                break
        nums[ind + 1:] = reversed(nums[ind + 1:])
