c++:
class Solution {
public:
    double solvePow(double x,int n){
        if(n==0)return 1.0;
        double half=solvePow(x,n/2);
        if(n%2==0)return half*half;
        else return half*half*x;
    }
    double myPow(double x, int n) {
        if(n<0)return 1/solvePow(x,n);
        return solvePow(x,n);
    }
};
java:
class Solution {
    public double solvePow(double x, int n) {
        if (n == 0) return 1.0;
        double half = solvePow(x, n / 2);
        if (n % 2 == 0) return half * half;
        else return half * half * x;
    }

    public double myPow(double x, int n) {
        if (n < 0) return 1 / solvePow(x, n);
        return solvePow(x, n);
    }
}

python:
class Solution {
    public double solvePow(double x, long n) { // Use long to prevent overflow
        if (n == 0) return 1.0;
        double half = solvePow(x, n / 2);
        if (n % 2 == 0) return half * half;
        else return half * half * x;
    }

    public double myPow(double x, int n) {
        long power = n; // Convert to long
        if (power < 0) {
            power = -power;
            return 1 / solvePow(x, power);
        }
        return solvePow(x, power);
    }
}
